Файл 1
1)(= 2 (+ 1 1))
2)(= (+ 3 4) 7 (+ 2 5))
3)(= true (= 2 2/1))
4)(= false (= 2 2.0))
5)(= true (== 2.0 2))
6)(= true (not (= 1 nil)))
7)(= false (= "hello" :hello 'hello))
8)(= :hello (keyword :hello))
9)(= 'hello (symbol 'hello))
10)(= (keyword nil) nil)
11)(not= :fill-in-the-blank :fill)
Файл 2
1)(= "hello" "hello")
2)(= "world" (str 'world))
3)(= "Cool right?" (str "Cool " "right?"))
4)(= \C (get "Characters" 0))
5)(= 11 (count "Hello World"))
6)(= false (= \c "c"))
7)(= "World" (subs "Hello World" 6 11))
8)(= "123" (clojure.string/join '(1 2 3)))
9)(= "1, 2, 3" (clojure.string/join ", " '(1 2 3)))
10)(= "olleh" (clojure.string/reverse "hello"))
11)(= 0 (clojure.string/index-of "hello world" "h"))
12)(= 13 (clojure.string/last-index-of "hello world, hello" "hello"))
13)(= nil (clojure.string/index-of "hello world" "bob"))
14)(= "hello world" (clojure.string/trim "  \nhello world \t \n"))
15)user=> (= true (char? \c))
16)(= false (char? "a"))
17)(= false (string? \b))
18)(= true (string? "a"))
19)(= true (clojure.string/blank? ""))
20)(= true (clojure.string/blank? " \n \t  "))
21)(= false (clojure.string/blank? "hello?\nare you out there?"))
Файл 3
1)(= '(1 2 3 4 5) (list 1 2 3 4 5))
2)(= 1 (first '(1 2 3 4 5)))
3)(= '(2 3 4 5) (rest '(1 2 3 4 5)))
4)(= 3 (count '(dracula dooku chocula)))
5)(= 0 (count '()))
6)(= '() (rest '(100)))
7)(= '(:a :b :c :d :e) (cons :a '(:b :c :d :e)))
8)(= '(:e :a :b :c :d) (conj '(:a :b :c :d) :e))
9) (= :a (peek '(:a :b :c :d :e)))
10)(= '(:b :c :d :e) (pop '(:a :b :c :d :e)))
11)(= "No dice!" (try
          (pop '())
          (catch IllegalStateException e
            "No dice!")))
12)(= '() (try
          (rest '())
          (catch IllegalStateException e
            "No dice!")))
Файл 4
1)(= 1 (count [42]))
2)(= '(1) (vec '(1)))
3)(= [nil nil] (vector nil nil))
4)(= [1 2] (vec '(1 2)))
5)(= [111 222 333] (conj [111 222] 333))
6)(= :peanut (first [:peanut :butter :and :jelly]))
7)(= :jelly (last [:peanut :butter :and :jelly]))
8)(= :jelly (nth [:peanut :butter :and :jelly] 3))
9)(= [:butter :and] (subvec [:peanut :butter :and :jelly] 1 3))
10)(= (list 1 2 3) (vector 1 2 3))
Файл 5
1)(= #{3} (set '(3)))
2)(= 3 (count #{1 2 3}))
3)(= #{1 2 3 4 5} (set '(1 1 2 2 3 3 4 4 5 5)))